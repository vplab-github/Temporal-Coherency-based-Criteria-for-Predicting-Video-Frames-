import tensorflow as tf
from tfutils import w, b, conv_out_size
import constants as c


# noinspection PyShadowingNames
class DScaleModel:
    """
    A DScaleModel is a network that takes as input one video frame and attempts to discriminate
    whether or not the output frame is a real-world image or one generated by a generator network.
    Multiple of these are used together in a DiscriminatorModel to make predictions on frames at
    increasing scales.
    """

    def __init__(self, scale_index, height, width, conv_layer_fms, kernel_sizes, fc_layer_sizes):
        """
        Initializes the DScaleModel.

        @param scale_index: The index number of this height in the GeneratorModel.
        @param height: The height of the input images.
        @param width: The width of the input images.
        @param conv_layer_fms: The number of output feature maps for each convolution.
        @param kernel_sizes: The size of the kernel for each convolutional layer.
        @param fc_layer_sizes: The number of nodes in each fully-connected layer.

        @type scale_index: int
        @type height: int
        @type width: int
        @type conv_layer_fms: list<int>
        @type kernel_sizes: list<int> (len = len(scale_layer_fms) - 1)
        @type fc_layer_sizes: list<int>
        """
        assert len(kernel_sizes) == len(conv_layer_fms) - 1, \
            'len(kernel_sizes) must = len(conv_layer_fms) - 1'

        self.scale_index = scale_index
        self.height = height
        self.width = width
        self.conv_layer_fms = conv_layer_fms
        self.kernel_sizes = kernel_sizes
        self.fc_layer_sizes = fc_layer_sizes
        self.padding = c.PADDING_D

        self.define_graph()

    # noinspection PyAttributeOutsideInit
    def define_graph(self):
        """
        Sets up the model graph in TensorFlow.
        """

        self.train_vars = []  # the variables to train in the optimization step

        ##
        # Layer setup
        ##

        with tf.name_scope('setup'):
            # convolution
            with tf.name_scope('convolutions'):
                self.conv_ws = []
                self.conv_bs = []
                last_out_height = self.height
                last_out_width = self.width
                with tf.name_scope('weights'):
                    for i in xrange(len(self.kernel_sizes)):
                        self.conv_ws.append(w([self.kernel_sizes[i],
                                              self.kernel_sizes[i],
                                              self.conv_layer_fms[i],
                                              self.conv_layer_fms[i + 1]], 'dis_con_' +
                                              str(self.scale_index) + '_' + str(i)))

                with tf.name_scope('biases'):
                    for i in xrange(len(self.kernel_sizes)):
                        self.conv_bs.append(b([self.conv_layer_fms[i + 1]]))

                        last_out_height = conv_out_size(
                            last_out_height, self.padding, self.kernel_sizes[i], 1)
                        last_out_width = conv_out_size(
                            last_out_width, self.padding, self.kernel_sizes[i], 1)

            # fully-connected
            with tf.name_scope('fully-connected'):
                # Add in an initial layer to go from the last conv to the first fully-connected.
                # Use /2 for the height and width if not using the new models because there is a 2x2 pooling layer
                self.fc_layer_sizes.insert(
                    0, last_out_height * last_out_width * self.conv_layer_fms[-1])

                self.fc_ws = []
                self.fc_bs = []
                with tf.name_scope('weights'):
                    for i in xrange(len(self.fc_layer_sizes) - 1):
                        self.fc_ws.append(w([self.fc_layer_sizes[i],
                                            self.fc_layer_sizes[i + 1]], 'dis_fc_' +
                                            str(self.scale_index) + '_' + str(i)))
                with tf.name_scope('biases'):
                    for i in xrange(len(self.fc_layer_sizes) - 1):
                        self.fc_bs.append(b([self.fc_layer_sizes[i + 1]]))

            self.train_vars += self.conv_ws
            self.train_vars += self.conv_bs
            self.train_vars += self.fc_ws
            self.train_vars += self.fc_bs

    ##
    # Forward pass calculation
    ##

    def generate_all_predictions(self, hist_frames, input_frames):
        """
        Calls generate_predictions() c.GT_LEN times to generate predictions from 0 (generated img) to 1 (real img)
        for each image in the ground truths/generated predictions corresponding to each input sample in the batch.

        @return: A tensor of predictions of shape [self.batch_size x c.GT_LEN].
        """
        def generate_predictions(input_frames):
            """
            Runs input_frames through the network to generate a prediction from 0
            (generated img) to 1 (real img).

            @param input_frames: An array of shape [batch_size x self.height x self.width x 3],
            The frames for which the predictions need to be made.

            @return: A tensor of predictions of shape [self.batch_size x 1].
            """
            with tf.name_scope('calculation'):
                preds = []  # tf.zeros([self.batch_size, 1]) Not using a tensor so that it doesn't show up in the graph
                last_input = input_frames

                # convolutions
                with tf.name_scope('convolutions'):
                    for i in xrange(len(self.conv_ws)):
                        # Convolve layer and activate with ReLU
                        with tf.name_scope('conv2d_layer'):
                            preds = tf.nn.conv2d(
                                last_input, self.conv_ws[i], [1, 1, 1, 1], padding=self.padding)
                            preds = tf.nn.leaky_relu(preds + self.conv_bs[i])

                            last_input = preds

                # pooling layer if not using new models
                # with tf.name_scope('pooling'):
                #    preds = tf.nn.max_pool(preds, [1, 2, 2, 1], [1, 2, 2, 1], padding=self.padding)

                # flatten preds for dense layers
                shape = preds.get_shape().as_list()
                # -1 can be used as one dimension to size dynamically
                preds = tf.reshape(preds, [-1, shape[1] * shape[2] * shape[3]])

                # fully-connected layers
                with tf.name_scope('fully-connected'):
                    for i in xrange(len(self.fc_ws)):
                        with tf.name_scope('sigmoid_layer' if i == len(self.fc_ws) - 1 else 'fc_layer'):
                            preds = tf.matmul(preds, self.fc_ws[i]) + self.fc_bs[i]

                            # Activate with ReLU (or Sigmoid for last layer)
                            if i == len(self.fc_ws) - 1:
                                preds = tf.sigmoid(preds)
                            else:
                                preds = tf.nn.leaky_relu(preds)

                # clip preds between [.1, 0.9] for stability
                with tf.name_scope('clip'):
                    preds = tf.clip_by_value(preds, 0.1, 0.9)

                return preds

        preds_all = []
        for gt_num in xrange(c.GT_LEN):
            input_frames_i = hist_frames[:, :, :, gt_num * 3:]
            input_frames_i = tf.concat([input_frames_i, input_frames[:, :, :, : (gt_num + 1) * 3]], 3)

            if gt_num > 0:
                preds_all = tf.concat([preds_all, generate_predictions(input_frames_i)], -1)
            else:
                preds_all = generate_predictions(input_frames_i)

        return preds_all

    ##
    # Training handled by DiscriminatorModel
    ##
